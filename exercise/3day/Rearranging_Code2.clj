;; 3 일차
;; 코드 재배열: ->> (Rearranging Code: ->>)
;; url https://www.4clojure.com/problem/72
;; 원문

;; 한글
;; 이문제는 스레드 라스트(thread-last) 매크로(->>)를 사용한다.
;; 이매크로는 스레드 퍼스트 매크로와 대단히 유사하다.
;; 중요한 차이점은 식을 마지막 인수로 하여 형식들에 연속해서 통과 시킨다는 것이다.
;; 이것이 특히 유용한 경우는 컬렉션을 마지막 인수로 받는 map이나 filter, take
;; 같은 함수들을 연이어 처리하고 싶을 때이다.
;; (->> [1 2 3 4 5 6 7 8] (filter even?) (take 3))
;; => (2 4 6)
;; 스레드 라스트 매크로 ->>는 식 x를 그 뒤의 형식들에 연속해서 통과 시킨다.
;; x가 그 뒤의 첫 번째 형식의 마지막 요소로 삽입되는데, 그 형식이 리스트가 아니면 리스트로 만든 후
;; 삽입된다. 그 다음 첫 번째 형식이 두 번째 형식의 마지막 요소로 삽입되는데, 마찬가지로
;; 필요하면 리스트로 만든다. 이 과정이 모든 형식들을 대상으로 계속 된다.
;; 이 스레드 라스트 매크로를 사용하면 코드 가독성이 높아진다.
;; (= (__ (map inc (take 3 (drop 2 [2 5 4 1 3 6]))))
;;    (->> [2 5 4 1 3 6] (drop 2) (take 3) (map inc) (__))
;;    11)

;; answer reduce +
(= (reduce + (map inc (take 3 (drop 2 [2 5 4 1 3 6]))))
   (->> [2 5 4 1 3 6] (drop 2) (take 3) (map inc) (reduce +))
   11)
